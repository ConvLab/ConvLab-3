# -*- coding: utf-8 -*-
"""
Created on 

@author: 
"""
from transformers import AutoTokenizer, AutoModelForCausalLM

from convlab.dialog_agent import Agent
from utils import lexcalise, find_substrings, additional_special_tokens
from convlab.util import load_database

EMOTION_PLACEHOLDER = '__emotion_placeholder__'


class EMOTODAgent(Agent):
    def __init__(self,
                 model_file='/home/shutong/models/emotod',
                 name='emotod'):
        """
        soloist agent initialization
        Args:
            model_file (str):
                trained model path or url. 
        Example:
            model = SOLOISTAgent()
        """
        super(EMOTODAgent, self).__init__(name=name)
        
        self.model = AutoModelForCausalLM.from_pretrained(model_file, device_map="auto")
        self.model.eval()

        self.tokenizer = AutoTokenizer.from_pretrained(model_file)
        self.tokenizer.padding_side = "left"
        self.tokenizer.pad_token = self.tokenizer.eos_token
        self.tokenizer.add_special_tokens({'additional_special_tokens': additional_special_tokens})

        self.model.resize_token_embeddings(len(self.tokenizer))

        self.device = self.model.device
        self.eos_token = "<|endofresponse|>" 
        self.dataset_name = 'multiwoz21'
        self.database = load_database(self.dataset_name)

        self.init_session()

    
    def init_session(self):
        self.utterance_history = []
        self.user_emotion_history = []
    
    def prepare_input(self, usr):
        self.utterance_history.append(usr)
        context = "<|context|>"
        for i, t in enumerate(self.utterance_history):
            if i%2 == 0: # user turn
                context += f" <|user|> {t}"
                if i//2 < len(self.user_emotion_history):
                    context += f" <|useremotion|> {EMOTION_PLACEHOLDER} <|endofuseremotion|>"
                    context = context.replace(EMOTION_PLACEHOLDER, self.user_emotion_history[i//2])
            else:
                context += f" <|system|> {t}"
                
        context += " <|endofcontext|> "

        return context
    

    def response(self, usr):
        """
        Generate agent response given user input.

        Args:
            observation (str):
                The input to the agent.
        Returns:
            response (str):
                The response generated by the agent.
        """
        context = self.prepare_input(usr)
        
        encoding = self.tokenizer(context, return_tensors="pt", padding=True).to(self.device)

        outputs = self.model.generate(
            input_ids=encoding.input_ids,
            attention_mask=encoding.attention_mask,
            pad_token_id=self.tokenizer.eos_token_id,
            do_sample=False, 
            max_new_tokens=500, 
            eos_token_id=self.tokenizer.convert_tokens_to_ids([self.eos_token])[0],
            no_repeat_ngram_size=10,
            )
        
        full_generation = self.tokenizer.decode(outputs[0], skip_special_tokens=False)

        # get user emotion and update to user_emotion_history
        user_emotion_str = find_substrings(full_generation, '<|useremotion|>', '<|endofuseremotion|>')
        if not user_emotion_str:
            user_emotion_str = 'neutral'
        else:
            user_emotion_str = user_emotion_str[-1].strip()
        self.user_emotion_history.append(user_emotion_str)

        lexicalised_response = lexcalise(full_generation, self.database).strip()
        # print(full_generation)
        self.utterance_history.append(lexicalised_response)

        return lexicalised_response

if __name__ == '__main__':
    s = EMOTODAgent()

    user = "I want to find a cheap restaurant in the center"
    system = s.response(user)
    print(user)
    print(system)
    "There are 15 cheap restaurants in the centre . What type of food do you want ?"
    print()

    user = "I would like to have chinese food"
    system = s.response(user)
    "There are 3 cheap chinese restaurants in the centre . Would you like me to make a reservation for you at 1 of them ?"
    print(user)
    print(system)

    user = "Yes, please reserve for two people at 6 pm on monday"
    system = s.response(user)
    print(user)
    print(system)
    "I have booked you at Charlie Chan . The reference number is 00000010 . Is there anything else i can help you with ?"

    